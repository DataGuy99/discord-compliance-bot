name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.7'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r heroku-api/requirements.txt
          pip install pytest pytest-asyncio pytest-cov ruff

      - name: Lint with ruff
        run: |
          ruff check heroku-api/

      - name: Check formatting with ruff
        run: |
          ruff format --check heroku-api/

      - name: Run tests
        env:
          DATABASE_URL: postgresql+asyncpg://testuser:testpass@localhost:5432/testdb
          REDIS_VECTOR_URL: redis://localhost:6379/0
          XAI_API_KEY: test-key-for-ci
          ADMIN_TOKEN: test-admin-token
          ENVIRONMENT: test
        run: |
          pytest heroku-api/ -v --cov=heroku-api --cov-report=xml --cov-report=term

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: discord-compliance-bot:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-heroku:
    name: Deploy to Heroku
    runs-on: ubuntu-latest
    needs: [lint-and-test, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.13.15
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          usedocker: false
          appdir: heroku-api
          procfile: Procfile

      - name: Run database migrations
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
        run: |
          heroku run alembic upgrade head --app $HEROKU_APP_NAME

      - name: Health check
        run: |
          sleep 10
          curl -f https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com/health || exit 1